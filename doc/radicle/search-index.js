var searchIndex = [{ty:"mod",name:"",path:"radicle",desc:"A lisp interpreter."},{ty:"struct",name:"Environment",path:"radicle",desc:""},{ty:"structfield",name:"parent",path:"radicle",desc:"",parent:'3985'},{ty:"structfield",name:"bindings",path:"radicle",desc:"",parent:'3985'},{ty:"fn",name:"read_eval",path:"radicle",desc:"A convenience function that calls read & eval and displays their results"},{ty:"mod",name:"tree",path:"radicle",desc:""},{ty:"enum",name:"Tree",path:"radicle::tree",desc:""},{ty:"variant",name:"Nil",path:"radicle::tree",desc:"",parent:'21'},{ty:"variant",name:"Leaf",path:"radicle::tree",desc:"",parent:'21'},{ty:"variant",name:"Branch",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"eq",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"ne",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"clone",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"is_nil",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"is_leaf",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"is_branch",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"get_ref_leaf",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"get_ref_branch",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"unwrap_leaf",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"unwrap_branch",path:"radicle::tree",desc:"",parent:'21'},{ty:"method",name:"fmt",path:"radicle::tree",desc:"",parent:'21'},{ty:"mod",name:"repl",path:"radicle",desc:""},{ty:"fn",name:"do_repl",path:"radicle::repl",desc:""},{ty:"mod",name:"eval",path:"radicle",desc:""},{ty:"fn",name:"eval",path:"radicle::eval",desc:"The heart and soul of Radicle."},{ty:"fn",name:"result_bind",path:"radicle::eval",desc:"A bind for the Result<T, ~str> monad."},{ty:"fn",name:"result_fmap2",path:"radicle::eval",desc:"Fmap2 for the Result<T, ~str> monad. Used in a couple places in eval()"},{ty:"mod",name:"read",path:"radicle",desc:""},{ty:"fn",name:"read",path:"radicle::read",desc:"Tries to reads a string of symbols into a list of expressions"},{ty:"fn",name:"tokenize",path:"radicle::read",desc:"Turns a string into a stream of tokens. Currently assumes that tokens\ndo not have spaces or parens/brackets/braces in them."},{ty:"fn",name:"read_from",path:"radicle::read",desc:"Attempts to read an entire expression from the token stream. Detects\nmismatched parentheses. Also expands ' <expr> into (quote <expr)"},{ty:"typedef",name:"TokenStream",path:"radicle::read",desc:"Intermediate representation after tokenization and before it gets read into\nan expression."},{ty:"typedef",name:"Expr",path:"radicle",desc:"The representation of Lisp expressions"},{ty:"typedef",name:"Exprs",path:"radicle",desc:""}];var allPaths = {'2854':{type:'fn',name:'result_fmap2'},'3017':{type:'fn',name:'tokenize'},'3145':{type:'fn',name:'read_from'},'0':{type:'mod',name:'radicle'},'2949':{type:'fn',name:'read'},'3980':{type:'typedef',name:'Exprs'},'34':{type:'variant',name:'Branch'},'3687':{type:'fn',name:'read_eval'},'2938':{type:'typedef',name:'TokenStream'},'859':{type:'mod',name:'repl'},'3974':{type:'typedef',name:'Expr'},'986':{type:'mod',name:'eval'},'868':{type:'fn',name:'do_repl'},'2806':{type:'fn',name:'result_bind'},'2928':{type:'mod',name:'read'},'15':{type:'mod',name:'tree'},'21':{type:'enum',name:'Tree'},'26':{type:'variant',name:'Leaf'},'3985':{type:'struct',name:'Environment'},'22':{type:'variant',name:'Nil'},'996':{type:'fn',name:'eval'}};