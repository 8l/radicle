(defun null (x)
    (eq x '()))

(defun and (x y)
    (cond (x (cond (y 't) 
                   ('t '())))
          ('t '())))


(defun not (x)
    (cond (x '())
          ('t 't)))

(defun append [x y]
    (cond ((null x) y)
          ('t (cons (first x) (append (rest x) y)))))

(defun pair [x y]
    (cond {(and (null x) (null y)) '()}
          {(and (not (atom x)) (not (atom y)))
           (cons (cons (first x) (cons (first y) '()))
                 (pair (rest x) (rest y)))}))


(defun frest (x)
    (first (rest x)))

(defun ffirst (x)
    (first (first x)))

(defun frrest (x)
    (first (rest (rest x))))

(defun frfirst (x)
    (first (rest (first x))))

(defun assoc (x y)
    (cond {(eq (ffirst y) x) (frfirst y)}
          {'t (assoc x (rest y))}))
    




(null 'foo)
(null '())
(and (atom 'foo) (eq 'foo 'foo))
(and (atom 'foo) 'bar)

(append '(a b c d) '(x y z))

(append '() '(foo (bar) baz))

(pair '(a b c) '(1 2 3))
(pair '() '())

(assoc 'x '((x a) (y b)))
(assoc 'x '((y zuh) (x far) (x boo) (y baz)))
